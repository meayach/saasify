import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ApplicationService, Application } from '../../../../@shared/services/application.service';
import {
  ApplicationConfigurationService,
  ApplicationConfigurationResponse,
} from '../../../../@shared/services/application-configuration.service';
import {
  PaymentMethods,
  DEFAULT_PAYMENT_METHODS,
} from '../../../../@shared/constants/payment-methods';
import { NotificationService } from '../../../../@shared/services/notification.service';
import { ApplicationRefreshService } from '../../../../@shared/services/application-refresh.service';
import { ApiService, Plan } from '../../../../@core/services/api.service';
import { LoggerService } from '../../../../@core/services/logger.service';

export interface ApplicationConfiguration {
  applicationName: string;
  domainName: string;
  logo?: File;
  isActive: boolean;
  paymentMethods: PaymentMethods;
}

@Component({
  selector: 'app-application-configure',
  templateUrl: './application-configure.component.html',
  styleUrls: ['./application-configure.component.css'],
})
export class ApplicationConfigureComponent implements OnInit {
  applicationId: string | null = null;
  isLoading = true;
  isSubmitting = false;

  currentApplication: Application | null = null;
  existingConfiguration: ApplicationConfigurationResponse | null = null;
  plans: Plan[] = [];
  selectedDefaultPlanId: string | null = null;
  isChangingPlan = false;
  tempSelectedPlanId: string | null = null;

  configurationForm: ApplicationConfiguration = {
    applicationName: '',
    domainName: '',
    isActive: true,
    paymentMethods: { ...DEFAULT_PAYMENT_METHODS },
  };

  customFieldTypes = [
    { value: 'string', label: 'Type String' },
    { value: 'number', label: 'Type Number' },
    { value: 'boolean', label: 'Type Boolean' },
    { value: 'date', label: 'Type Date' },
  ];

  selectedLogo: File | null = null;
  logoPreview: string | null = null;

  constructor(
    public router: Router,
    private route: ActivatedRoute,
    private applicationService: ApplicationService,
    private configurationService: ApplicationConfigurationService,
    private notificationService: NotificationService,
    private applicationRefreshService: ApplicationRefreshService,
    private apiService: ApiService,
    private logger: LoggerService,
  ) {}

  ngOnInit(): void {
    this.applicationId = this.route.snapshot.paramMap.get('id');
    if (this.applicationId) {
      this.loadApplication();
    } else {
      this.router.navigate(['/applications']);
    }

    // √âcouter les changements d'applications pour synchroniser le toggle
    this.applicationRefreshService.refreshNeeded$.subscribe(() => {
      this.logger.log("üîÑ Changement d'application d√©tect√©, rechargement...");
      if (this.applicationId) {
        this.loadApplicationData();
      }
    });

    // Test de notification au chargement
    setTimeout(() => {
      this.notificationService.info(
        'Le formulaire de configuration est pr√™t √† √™tre utilis√©.',
        'Configuration pr√™te',
      );
    }, 1000);
  }

  loadApplication(): void {
    if (!this.applicationId) return;

    this.applicationService.getApplications().subscribe({
      next: (applications) => {
        const app = applications.find((a) => a._id === this.applicationId);
        if (app) {
          this.currentApplication = app;
          this.configurationForm.applicationName = app.name;
          this.configurationForm.domainName =
            app.name.toLowerCase().replace(/\s+/g, '-') + '.saasify.com';

          // Utiliser isActive si disponible, sinon d√©duire du status
          this.configurationForm.isActive =
            app.isActive !== undefined ? app.isActive : app.status === 'active';

          // üéØ R√©cup√©rer le plan s√©lectionn√© de l'application (priorit√© sur defaultPlanId)
          if (app.selectedPlan && app.selectedPlan.id) {
            this.selectedDefaultPlanId = app.selectedPlan.id;
            this.logger.log(
              "üéØ Plan s√©lectionn√© charg√© depuis l'application.selectedPlan:",
              app.selectedPlan,
            );
          } else if (app.defaultPlanId) {
            this.selectedDefaultPlanId = app.defaultPlanId;
            this.logger.log(
              "üéØ Plan par d√©faut charg√© depuis l'application.defaultPlanId:",
              this.selectedDefaultPlanId,
            );
          } else {
            this.selectedDefaultPlanId = null;
            this.logger.log("‚ö†Ô∏è Aucun plan trouv√© dans l'application");
          }

          this.logger.log(
            'üìã Application charg√©e:',
            app.name,
            'Status:',
            app.status,
            'isActive:',
            this.configurationForm.isActive,
            'defaultPlanId:',
            this.selectedDefaultPlanId,
          );

          // Charger la configuration existante
          this.loadExistingConfiguration();
        } else {
          this.notificationService.error('Application non trouv√©e');
          this.router.navigate(['/applications']);
        }
      },
      error: (error) => {
        this.logger.error("Erreur lors du chargement de l'application:", error);
        this.notificationService.error("Erreur lors du chargement de l'application");
        this.isLoading = false;
        this.router.navigate(['/applications']);
      },
    });
  }

  loadExistingConfiguration(): void {
    if (!this.applicationId) return;

    this.configurationService.getConfiguration(this.applicationId).subscribe({
      next: (config) => {
        this.existingConfiguration = config;
        // Pr√©-remplir le formulaire avec la configuration existante
        this.configurationForm.applicationName = config.applicationName;
        this.configurationForm.domainName = config.domainName;
        // NE PAS √©craser isActive - garder la valeur de l'application comme source de v√©rit√©
        // this.configurationForm.isActive = config.isActive;
        this.configurationForm.paymentMethods = { ...config.paymentMethods };
        this.isLoading = false;
        // Charger les plans associ√©s √† cette application
        this.loadPlans();
      },
      error: (error) => {
        // Si aucune configuration n'existe, ce n'est pas une erreur
        this.logger.info(
          "Aucune configuration existante trouv√©e, cr√©ation d'une nouvelle configuration",
        );
        this.isLoading = false;
        // charger les plans m√™me si pas de configuration
        this.loadPlans();
      },
    });
  }

  loadPlans(): void {
    if (!this.applicationId) return;

    // Charger TOUS les plans disponibles au lieu de seulement ceux li√©s √† l'application
    this.apiService.getPlans().subscribe({
      next: (response: any) => {
        // G√©rer la r√©ponse qui peut √™tre un objet avec des plans ou directement un tableau
        this.plans = response?.plans || response || [];
        this.logger.log('üîç Tous les plans charg√©s:', this.plans.length);
        this.logger.log('üìã Plans disponibles:', this.plans);

        // Si aucun plan n'est trouv√©, utiliser des plans par d√©faut
        if (this.plans.length === 0) {
          this.logger.log('‚ö†Ô∏è Aucun plan trouv√©, utilisation des plans par d√©faut');
          this.loadDefaultPlans();
        }

        // Preselect default plan if application has one
        if (this.currentApplication && this.currentApplication.defaultPlanId) {
          this.selectedDefaultPlanId = this.currentApplication.defaultPlanId;
          this.logger.log('üéØ Plan par d√©faut s√©lectionn√©:', this.selectedDefaultPlanId);
        }
        // If application has no default plan, try to use selected plan from localStorage
        if (!this.selectedDefaultPlanId) {
          try {
            const storedPlan = localStorage.getItem('selectedPlan');
            if (storedPlan) {
              const planData = JSON.parse(storedPlan);
              const planId = planData?.id || planData?._id;
              if (planId && this.plans.find((p) => this.getPlanId(p) === planId)) {
                this.selectedDefaultPlanId = planId;
                this.logger.log('üìå Plan s√©lectionn√© r√©cup√©r√© depuis localStorage:', planId);
              }
            }
          } catch (e) {
            this.logger.warn('Erreur lors de la lecture du plan depuis localStorage:', e);
          }
        }
        // If still no plan selected and there's exactly one plan, preselect it
        if (!this.selectedDefaultPlanId && this.plans && this.plans.length === 1) {
          const solePlanId = this.getPlanId(this.plans[0]);
          this.selectedDefaultPlanId = solePlanId;
          this.logger.log('‚ÑπÔ∏è Un seul plan disponible ‚Äî pr√©-s√©lection automatique:', solePlanId);
        }
      },
      error: (err: any) => {
        this.logger.warn('Erreur lors du chargement des plans:', err);
        this.logger.log('üîÑ Chargement des plans par d√©faut...');
        this.loadDefaultPlans();
      },
    });
  }

  // M√©thode pour charger des plans par d√©faut si l'API ne fonctionne pas
  loadDefaultPlans(): void {
    this.plans = [
      {
        id: 'plan-starter-2025',
        name: 'Plan Starter',
        description: 'Parfait pour d√©buter',
        price: 9.99,
        currency: 'EUR',
        billingCycle: 'MONTHLY',
        features: ['1 Application', 'Support email', 'Analytics de base'],
        applicationId: '',
        isActive: true,
        limitations: {},
      },
      {
        id: 'plan-pro-2025',
        name: 'Plan Pro',
        description: 'Pour les professionnels',
        price: 29.99,
        currency: 'EUR',
        billingCycle: 'MONTHLY',
        features: ['5 Applications', 'Support prioritaire', 'Analytics avanc√©es'],
        applicationId: '',
        isActive: true,
        limitations: {},
      },
      {
        id: 'plan-enterprise-2025',
        name: 'Plan Enterprise',
        description: 'Pour les grandes entreprises',
        price: 99.99,
        currency: 'EUR',
        billingCycle: 'MONTHLY',
        features: ['Applications illimit√©es', 'Support 24/7', 'Analytics compl√®tes'],
        applicationId: '',
        isActive: true,
        limitations: {},
      },
    ];
    this.logger.log('‚úÖ Plans par d√©faut charg√©s:', this.plans.length);
  }

  // Helper pour r√©cup√©rer un id de plan compatible (_id ou id)
  getPlanId(plan: Plan | any): string {
    return plan && (plan.id || plan._id) ? plan.id || plan._id : '';
  }

  onLogoSelected(event: any): void {
    const file = event.target.files[0];
    if (file) {
      this.selectedLogo = file;

      // Cr√©er une pr√©visualisation
      const reader = new FileReader();
      reader.onload = (e: any) => {
        this.logoPreview = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  }

  onSubmit(): void {
    if (!this.validateForm()) {
      return;
    }

    if (!this.applicationId) {
      this.notificationService.error("ID de l'application manquant");
      return;
    }

    this.isSubmitting = true;

    // Notification de d√©but de sauvegarde
    this.notificationService.info('Sauvegarde de la configuration en cours...', 'Sauvegarde');

    const configRequest = {
      applicationId: this.applicationId,
      applicationName: this.configurationForm.applicationName,
      domainName: this.configurationForm.domainName,
      isActive: this.configurationForm.isActive,
      paymentMethods: this.configurationForm.paymentMethods,
      logo: this.selectedLogo || undefined,
    };

    // Utiliser mise √† jour si configuration existante, sinon cr√©er
    const saveOperation = this.existingConfiguration
      ? this.configurationService.updateConfiguration(this.existingConfiguration._id, configRequest)
      : this.configurationService.saveConfiguration(configRequest);

    saveOperation.subscribe({
      next: (savedConfig) => {
        this.notificationService.success(
          `Configuration de l'application "${this.configurationForm.applicationName}" sauvegard√©e avec succ√®s !`,
          'Configuration sauvegard√©e',
        );

        // Mettre √† jour le nom et le statut de l'application si n√©cessaire
        if (this.currentApplication) {
          const needsNameUpdate =
            this.currentApplication.name !== this.configurationForm.applicationName;
          const needsStatusUpdate =
            this.currentApplication.status !==
            (this.configurationForm.isActive ? 'active' : 'inactive');
          const needsPlanUpdate =
            this.selectedDefaultPlanId &&
            this.currentApplication.defaultPlanId !== this.selectedDefaultPlanId;

          if (needsNameUpdate || needsStatusUpdate || needsPlanUpdate) {
            // Cr√©er l'objet de mise √† jour avec le nom et le statut
            const updateData: any = {};

            if (needsNameUpdate) {
              updateData.name = this.configurationForm.applicationName;
            }

            if (needsStatusUpdate) {
              updateData.status = this.configurationForm.isActive ? 'active' : 'inactive';
              updateData.isActive = this.configurationForm.isActive;
            }

            // Ajouter le plan par d√©faut s'il est s√©lectionn√©
            if (this.selectedDefaultPlanId) {
              updateData.defaultPlanId = this.selectedDefaultPlanId;
              this.logger.log('üíæ Sauvegarde du plan par d√©faut:', this.selectedDefaultPlanId);
            }

            this.applicationService.updateApplication(this.applicationId!, updateData).subscribe({
              next: () => {
                this.logger.log('Application mise √† jour avec succ√®s:', updateData);
                // Mettre √† jour l'application locale imm√©diatement
                if (this.currentApplication && this.selectedDefaultPlanId) {
                  this.currentApplication.defaultPlanId = this.selectedDefaultPlanId;
                }
              },
              error: (error) => {
                this.logger.error("Erreur lors de la mise √† jour de l'application:", error);
              },
            });
          }
        }

        this.isSubmitting = false;

        // Marquer qu'un rafra√Æchissement est n√©cessaire
        localStorage.setItem('shouldRefreshApplications', 'true');

        // If backend returned a logoUrl or logoPath, persist it so the list can show it immediately for this app
        const logoValue = (savedConfig as any)?.logoUrl || (savedConfig as any)?.logoPath;
        if (logoValue && this.applicationId) {
          try {
            // Ensure we store a fully-qualified URL. The backend returns a relative path like "uploads/...".
            const fullLogoUrl = logoValue.startsWith('http')
              ? logoValue
              : `${window.location.protocol}//${window.location.hostname}:3001/${logoValue}`;
            console.debug('Persisting app logo to localStorage', this.applicationId, fullLogoUrl);
            localStorage.setItem(`appLogo:${this.applicationId}`, fullLogoUrl);
            // also tell the list which app was just configured
            localStorage.setItem('lastConfiguredAppId', this.applicationId);
            if (this.currentApplication) {
              this.currentApplication.logoUrl = fullLogoUrl;
            }
          } catch (e) {
            this.logger.warn('Unable to persist app logo to localStorage', e);
          }
        }

        // D√©clencher le rafra√Æchissement de la liste des applications
        this.applicationRefreshService.triggerRefresh();

        // Rediriger vers la liste des applications
        this.router.navigate(['/applications']);
      },
      error: (error) => {
        this.logger.error('Erreur lors de la sauvegarde de la configuration:', error);
        this.notificationService.error(
          'Erreur lors de la sauvegarde de la configuration. Veuillez r√©essayer.',
          'Erreur de sauvegarde',
        );
        this.isSubmitting = false;
      },
    });
  }

  validateForm(): boolean {
    if (!this.configurationForm.applicationName.trim()) {
      this.notificationService.warning("Le nom de l'application est requis.", 'Champ requis');
      return false;
    }

    if (!this.configurationForm.domainName.trim()) {
      this.notificationService.warning('Le nom de domaine est requis.', 'Champ requis');
      return false;
    }

    const hasPaymentMethod = Object.values(this.configurationForm.paymentMethods).some(
      (method) => method,
    );
    if (!hasPaymentMethod) {
      this.notificationService.warning(
        'Au moins une m√©thode de paiement doit √™tre s√©lectionn√©e.',
        'M√©thode de paiement requise',
      );
      return false;
    }

    return true;
  }

  onCancel(): void {
    this.router.navigate(['/applications']);
  }

  loadApplicationData(): void {
    if (!this.applicationId) return;

    this.applicationService.getApplications().subscribe({
      next: (applications) => {
        const app = applications.find((a) => a._id === this.applicationId);
        if (app) {
          this.currentApplication = app;
          // Mettre √† jour seulement le statut actif, garder le reste de la configuration
          const newIsActive = app.isActive !== undefined ? app.isActive : app.status === 'active';

          this.logger.log(
            'üîÑ Rechargement donn√©es app:',
            app.name,
            'Status:',
            app.status,
            'isActive:',
            newIsActive,
          );

          // Mettre √† jour seulement si c'est diff√©rent pour √©viter les boucles
          if (this.configurationForm.isActive !== newIsActive) {
            this.configurationForm.isActive = newIsActive;
            this.logger.log('‚úÖ Toggle synchronis√©:', newIsActive);
          }
        }
      },
      error: (error) => {
        this.logger.error("Erreur lors du rechargement des donn√©es d'application:", error);
      },
    });
  }

  onToggleChange(event: any): void {
    const isActive = event.target.checked;
    this.logger.log('üîÑ Toggle configuration chang√©:', isActive);

    if (this.applicationId && this.currentApplication) {
      // Mettre √† jour imm√©diatement l'√©tat de l'application pour synchroniser avec les cartes
      this.applicationService.updateApplicationStatus(this.applicationId, isActive).subscribe({
        next: () => {
          this.logger.log("‚úÖ Statut de l'application mis √† jour imm√©diatement");
          // Mettre √† jour l'objet application local
          this.currentApplication!.status = isActive ? 'active' : 'inactive';
          this.currentApplication!.isActive = isActive;

          // D√©clencher le rafra√Æchissement de la liste
          this.applicationRefreshService.triggerRefresh();
        },
        error: (error) => {
          this.logger.error('‚ùå Erreur lors de la mise √† jour imm√©diate du statut:', error);
          // En cas d'erreur, remettre l'ancien √©tat
          this.configurationForm.isActive = !isActive;
        },
      });
    }
  }

  // Plan management methods
  getCurrentSelectedPlan(): any {
    this.logger.log('üîç getCurrentSelectedPlan() - D√©but de recherche');
    this.logger.log('üîç selectedDefaultPlanId:', this.selectedDefaultPlanId);
    this.logger.log('üîç plans disponibles:', this.plans?.length);
    this.logger.log('üîç currentApplication:', this.currentApplication);

    // Priorit√© 1: Plan s√©lectionn√© directement dans l'application
    if (this.currentApplication && this.currentApplication.selectedPlan) {
      this.logger.log(
        '‚úÖ Plan trouv√© dans currentApplication.selectedPlan:',
        this.currentApplication.selectedPlan,
      );
      return this.currentApplication.selectedPlan;
    }

    // Priorit√© 2: Si on a un selectedDefaultPlanId, chercher le plan correspondant
    if (this.selectedDefaultPlanId && this.plans) {
      const foundPlan = this.plans.find(
        (plan) => this.getPlanId(plan) === this.selectedDefaultPlanId,
      );
      if (foundPlan) {
        this.logger.log('‚úÖ Plan trouv√© par selectedDefaultPlanId:', foundPlan);
        return foundPlan;
      } else {
        this.logger.log('‚ö†Ô∏è selectedDefaultPlanId ne correspond √† aucun plan disponible');
      }
    }

    // Priorit√© 3: V√©rification du localStorage
    if (!this.selectedDefaultPlanId || !this.plans) {
      this.logger.log('‚ùå Pas de selectedDefaultPlanId ou pas de plans - v√©rification localStorage');

      // V√©rifier le localStorage pour un plan s√©lectionn√©
      try {
        const selectedPlan = localStorage.getItem('selectedPlan');
        if (selectedPlan) {
          const planData = JSON.parse(selectedPlan);
          this.logger.log('üì¶ Plan trouv√© dans localStorage selectedPlan:', planData);

          // V√©rifier si ce plan existe dans la liste des plans charg√©s
          if (this.plans) {
            const foundPlan = this.plans.find(
              (p) => this.getPlanId(p) === (planData.id || planData._id),
            );
            if (foundPlan) {
              this.logger.log('‚úÖ Plan du localStorage trouv√© dans la liste des plans');
              this.selectedDefaultPlanId = this.getPlanId(foundPlan);
              return foundPlan;
            } else {
              this.logger.log('‚ö†Ô∏è Plan selectedPlan obsol√®te - nettoyage n√©cessaire');
              this.logger.log('üîç Plan recherch√©:', planData.id || planData._id);
              this.logger.log(
                'üîç Plans disponibles:',
                this.plans.map((p) => this.getPlanId(p)),
              );

              // Nettoyer le localStorage du plan obsol√®te
              localStorage.removeItem('selectedPlan');
              this.logger.log('üßπ Plan obsol√®te supprim√© du localStorage selectedPlan');
            }
          }
        }

        // V√©rifier le localStorage pour un plan sp√©cifique √† l'application
        const appPlanKey = `appDefaultPlan:${this.applicationId}`;
        const appPlan = localStorage.getItem(appPlanKey);
        if (appPlan) {
          const planData = JSON.parse(appPlan);
          this.logger.log('üì± Plan trouv√© dans localStorage appDefaultPlan:', planData);

          if (this.plans) {
            const foundPlan = this.plans.find(
              (p) => this.getPlanId(p) === (planData.id || planData._id),
            );
            if (foundPlan) {
              this.logger.log("‚úÖ Plan d'application trouv√© dans la liste des plans");
              this.selectedDefaultPlanId = this.getPlanId(foundPlan);
              return foundPlan;
            } else {
              this.logger.log(
                '‚ö†Ô∏è Plan du localStorage non trouv√© dans la liste des plans - nettoyage n√©cessaire',
              );
              this.logger.log('üîç Plan recherch√©:', planData.id || planData._id);
              this.logger.log(
                'üîç Plans disponibles:',
                this.plans.map((p) => this.getPlanId(p)),
              );

              // Nettoyer le localStorage des plans obsol√®tes
              localStorage.removeItem(appPlanKey);
              this.logger.log('üßπ Plan obsol√®te supprim√© du localStorage appDefaultPlan');
            }
          }
        }
      } catch (e) {
        this.logger.warn('Erreur lors de la lecture du localStorage:', e);
      }

      return null;
    }

    return null;
  }

  hasSelectedPlan(): boolean {
    const selectedPlan = this.getCurrentSelectedPlan();
    this.logger.log('üîç hasSelectedPlan() - Plan trouv√©:', selectedPlan);
    this.logger.log('üîç hasSelectedPlan() - selectedDefaultPlanId:', this.selectedDefaultPlanId);
    this.logger.log('üîç hasSelectedPlan() - plans.length:', this.plans?.length);
    this.logger.log(
      'üîç hasSelectedPlan() - localStorage selectedPlan:',
      localStorage.getItem('selectedPlan'),
    );
    this.logger.log(
      'üîç hasSelectedPlan() - localStorage appDefaultPlan:',
      localStorage.getItem(`appDefaultPlan:${this.applicationId}`),
    );
    return selectedPlan !== null;
  }

  startChangingPlan(): void {
    this.logger.log('üîÑ D√©but du changement de plan');
    this.isChangingPlan = true;
    this.tempSelectedPlanId = null;
  }

  selectPlan(plan: any): void {
    const planId = this.getPlanId(plan);
    this.logger.log('üéØ Plan s√©lectionn√©:', plan.name, 'ID:', planId);

    if (this.isChangingPlan) {
      // En mode changement, utiliser tempSelectedPlanId
      this.tempSelectedPlanId = planId;
    } else {
      // S√©lection directe (premier choix)
      this.selectedDefaultPlanId = planId;
    }
  }

  confirmPlanChange(): void {
    if (this.tempSelectedPlanId) {
      this.logger.log('‚úÖ Confirmation du changement de plan vers:', this.tempSelectedPlanId);
      this.selectedDefaultPlanId = this.tempSelectedPlanId;
      this.cancelPlanChange();

      // Sauvegarder automatiquement le changement
      this.onSubmit();
    }
  }

  cancelPlanChange(): void {
    this.logger.log('‚ùå Annulation du changement de plan');
    this.isChangingPlan = false;
    this.tempSelectedPlanId = null;
  }

  getPlanCycleLabel(cycle: string): string {
    const cycles: { [key: string]: string } = {
      MONTHLY: 'mois',
      YEARLY: 'an',
      WEEKLY: 'semaine',
      DAILY: 'jour',
    };
    return cycles[cycle] || 'mois';
  }

  // M√©thode pour nettoyer localStorage (d√©bogage)
  clearStoredPlans(): void {
    this.logger.log('üßπ Nettoyage du localStorage...');
    const keysToRemove: string[] = [];
    
    // Identifier toutes les cl√©s li√©es aux plans
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.includes('selectedPlan') || key.includes('appDefaultPlan'))) {
        keysToRemove.push(key);
      }
    }
    
    // Supprimer les cl√©s identifi√©es
    keysToRemove.forEach(key => {
      this.logger.log('üóëÔ∏è Suppression de:', key);
      localStorage.removeItem(key);
    });
    
    this.logger.log(`‚úÖ ${keysToRemove.length} √©l√©ments supprim√©s du localStorage`);
    this.notificationService.success(`localStorage nettoy√© : ${keysToRemove.length} √©l√©ments supprim√©s`);
    
    // Recharger la d√©tection du plan
    this.selectedDefaultPlanId = this.getCurrentSelectedPlan();
  }

  // M√©thode pour s√©lectionner automatiquement le premier plan disponible
  autoSelectFirstPlan(): void {
    this.logger.log('üöÄ S√©lection automatique du premier plan...');
    
    if (this.plans && this.plans.length > 0) {
      const firstPlan = this.plans[0];
      const planId = this.getPlanId(firstPlan);
      
      this.logger.log('‚úÖ Premier plan s√©lectionn√©:', firstPlan.name, 'ID:', planId);
      this.selectedDefaultPlanId = planId;
      
      // Sauvegarder dans localStorage pour persister la s√©lection
      if (this.applicationId) {
        localStorage.setItem(`appDefaultPlan:${this.applicationId}`, planId);
      }
      
      this.notificationService.success(`Plan "${firstPlan.name}" s√©lectionn√© automatiquement`);
      
      // Sauvegarder automatiquement
      this.onSubmit();
    } else {
      this.logger.warn('‚ö†Ô∏è Aucun plan disponible pour la s√©lection automatique');
      this.notificationService.warning('Aucun plan disponible pour la s√©lection automatique');
    }
  }
}

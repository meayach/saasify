// Script pour synchroniser l'application SaasApplications vers dashboard
const { MongoClient } = require("mongodb");

async function syncApplicationToDashboard() {
  const client = new MongoClient("mongodb://localhost:27017");

  try {
    await client.connect();
    console.log("üîó Connect√© √† MongoDB");

    const db = client.db("saas-database");

    // R√©cup√©rer l'application de SaasApplications
    const saasCollection = db.collection("SaasApplications");
    const targetId = "68bf71ef4198a0b558e988a8";
    const saasApp = await saasCollection.findOne({
      _id: require("mongodb").ObjectId.createFromHexString(targetId),
    });

    if (!saasApp) {
      console.log("‚ùå Application non trouv√©e dans SaasApplications");
      return;
    }

    console.log("üìã Application SaaS trouv√©e:", saasApp.applicationName);

    // R√©cup√©rer un plan par d√©faut
    const plansCollection = db.collection("saasplans");
    const plans = await plansCollection.find({}).toArray();
    const defaultPlan = plans.find((p) => p.name === "Plan Pro") || plans[0];

    console.log(
      "üéØ Plan par d√©faut s√©lectionn√©:",
      defaultPlan.name,
      defaultPlan._id
    );

    // Cr√©er l'application correspondante dans dashboard
    const dashboardCollection = db.collection("saasapplications");

    const dashboardApp = {
      _id: saasApp._id, // Utiliser le m√™me ID
      name: saasApp.applicationName,
      slug:
        saasApp.applicationName.toLowerCase().replace(/\s+/g, "-") +
        "-" +
        saasApp._id.toString().substring(0, 6),
      status: saasApp.status,
      defaultPlanId: defaultPlan._id.toString(),
      isActive: saasApp.status === "active",
      createdAt: saasApp.createdAt,
      updatedAt: new Date(),
    };

    // Ins√©rer ou mettre √† jour
    const result = await dashboardCollection.replaceOne(
      { _id: saasApp._id },
      dashboardApp,
      { upsert: true }
    );

    console.log(
      "‚úÖ Application synchronis√©e dans dashboard:",
      result.upsertedId || "updated"
    );

    // V√©rifier le r√©sultat
    const syncedApp = await dashboardCollection.findOne({ _id: saasApp._id });
    console.log("üìã Application synchronis√©e:", {
      id: syncedApp._id,
      name: syncedApp.name,
      status: syncedApp.status,
      defaultPlanId: syncedApp.defaultPlanId,
      isActive: syncedApp.isActive,
    });

    console.log("\nüîó URL pour tester l'application originale:");
    console.log(`http://localhost:4200/applications/configure/${targetId}`);
  } catch (error) {
    console.error("‚ùå Erreur:", error.message);
  } finally {
    await client.close();
    console.log("üîê Connexion ferm√©e");
  }
}

syncApplicationToDashboard();

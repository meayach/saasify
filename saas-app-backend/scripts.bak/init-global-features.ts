import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { FeatureService } from '../services/feature/feature.service';
import { FeatureCategory, FeatureRole } from '../data/models/feature/feature.pojo.model';
import {
  FieldDataType,
  FieldUnit,
} from '../data/models/featureCustomField/featureCustomField.pojo.model';

async function initializeGlobalFeatures() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const featureService = app.get(FeatureService);

  console.log('üöÄ Initializing global features...');

  // Fonctionnalit√©s de communication
  const emailFeature = await featureService.createFeature({
    name: 'email_messaging',
    displayName: 'Messagerie Email',
    description: 'Syst√®me de messagerie √©lectronique',
    category: FeatureCategory.COMMUNICATION,
    roles: [FeatureRole.ALL],
    isGlobal: true,
    icon: 'email',
    sortOrder: 1,
  });

  await featureService.addCustomField(emailFeature._id.toString(), {
    fieldName: 'monthly_quota',
    displayName: 'Quota mensuel',
    description: "Nombre d'emails autoris√©s par mois",
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.EMAILS,
    defaultValue: 100,
    minValue: 0,
    isRequired: true,
    sortOrder: 1,
  });

  // Fonctionnalit√©s de stockage
  const storageFeature = await featureService.createFeature({
    name: 'data_storage',
    displayName: 'Stockage de Donn√©es',
    description: 'Espace de stockage pour les donn√©es utilisateur',
    category: FeatureCategory.STORAGE,
    roles: [FeatureRole.ALL],
    isGlobal: true,
    icon: 'storage',
    sortOrder: 2,
  });

  await featureService.addCustomField(storageFeature._id.toString(), {
    fieldName: 'storage_quota',
    displayName: 'Quota de stockage',
    description: 'Espace de stockage autoris√©',
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.GIGABYTES,
    defaultValue: 5,
    minValue: 0,
    isRequired: true,
    sortOrder: 1,
  });

  // Fonctionnalit√©s API
  const apiFeature = await featureService.createFeature({
    name: 'api_access',
    displayName: 'Acc√®s API',
    description: 'Acc√®s aux interfaces de programmation',
    category: FeatureCategory.API,
    roles: [FeatureRole.DEVELOPER, FeatureRole.MANAGER, FeatureRole.SAAS_CUSTOMER_ADMIN],
    isGlobal: true,
    icon: 'api',
    sortOrder: 3,
  });

  await featureService.addCustomField(apiFeature._id.toString(), {
    fieldName: 'monthly_requests',
    displayName: 'Requ√™tes mensuelles',
    description: 'Nombre de requ√™tes API autoris√©es par mois',
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.API_CALLS,
    defaultValue: 1000,
    minValue: 0,
    isRequired: true,
    sortOrder: 1,
  });

  await featureService.addCustomField(apiFeature._id.toString(), {
    fieldName: 'api_level',
    displayName: "Niveau d'API",
    description: "Niveau d'acc√®s aux fonctionnalit√©s API",
    dataType: FieldDataType.ENUM,
    unit: FieldUnit.NONE,
    enumValues: ['basic', 'standard', 'premium', 'enterprise'],
    defaultValue: 'basic',
    isRequired: true,
    sortOrder: 2,
  });

  // Fonctionnalit√©s utilisateurs
  const userMgmtFeature = await featureService.createFeature({
    name: 'user_management',
    displayName: 'Gestion des Utilisateurs',
    description: 'Syst√®me de gestion des utilisateurs et permissions',
    category: FeatureCategory.USER_MANAGEMENT,
    roles: [FeatureRole.MANAGER, FeatureRole.SAAS_CUSTOMER_ADMIN],
    isGlobal: true,
    icon: 'users',
    sortOrder: 4,
  });

  await featureService.addCustomField(userMgmtFeature._id.toString(), {
    fieldName: 'max_users',
    displayName: 'Utilisateurs maximum',
    description: "Nombre maximum d'utilisateurs autoris√©s",
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.USERS,
    defaultValue: 10,
    minValue: 1,
    isRequired: true,
    sortOrder: 1,
  });

  // Fonctionnalit√©s analytics
  const analyticsFeature = await featureService.createFeature({
    name: 'advanced_analytics',
    displayName: 'Analytics Avanc√©es',
    description: 'Analyses et rapports d√©taill√©s',
    category: FeatureCategory.ANALYTICS,
    roles: [FeatureRole.MANAGER, FeatureRole.SAAS_CUSTOMER_ADMIN],
    isGlobal: true,
    icon: 'analytics',
    sortOrder: 5,
  });

  await featureService.addCustomField(analyticsFeature._id.toString(), {
    fieldName: 'data_retention',
    displayName: 'R√©tention des donn√©es',
    description: 'Dur√©e de conservation des donn√©es analytiques',
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.MONTHS,
    defaultValue: 12,
    minValue: 1,
    isRequired: true,
    sortOrder: 1,
  });

  await featureService.addCustomField(analyticsFeature._id.toString(), {
    fieldName: 'custom_reports',
    displayName: 'Rapports personnalis√©s',
    description: 'Possibilit√© de cr√©er des rapports personnalis√©s',
    dataType: FieldDataType.BOOLEAN,
    unit: FieldUnit.NONE,
    defaultValue: false,
    isRequired: true,
    sortOrder: 2,
  });

  // Fonctionnalit√©s support
  const supportFeature = await featureService.createFeature({
    name: 'customer_support',
    displayName: 'Support Client',
    description: 'Niveaux de support et assistance',
    category: FeatureCategory.SUPPORT,
    roles: [FeatureRole.ALL],
    isGlobal: true,
    icon: 'support',
    sortOrder: 6,
  });

  await featureService.addCustomField(supportFeature._id.toString(), {
    fieldName: 'support_level',
    displayName: 'Niveau de support',
    description: 'Type de support disponible',
    dataType: FieldDataType.ENUM,
    unit: FieldUnit.NONE,
    enumValues: ['email', 'priority', '24x7', 'dedicated'],
    defaultValue: 'email',
    isRequired: true,
    sortOrder: 1,
  });

  await featureService.addCustomField(supportFeature._id.toString(), {
    fieldName: 'response_time',
    displayName: 'Temps de r√©ponse',
    description: 'Temps de r√©ponse garanti (en heures)',
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.HOURS,
    defaultValue: 48,
    minValue: 1,
    isRequired: true,
    sortOrder: 2,
  });

  // Fonctionnalit√©s s√©curit√©
  const securityFeature = await featureService.createFeature({
    name: 'security_features',
    displayName: 'Fonctionnalit√©s de S√©curit√©',
    description: 'Options de s√©curit√© avanc√©es',
    category: FeatureCategory.SECURITY,
    roles: [FeatureRole.SAAS_CUSTOMER_ADMIN, FeatureRole.MANAGER],
    isGlobal: true,
    icon: 'security',
    sortOrder: 7,
  });

  await featureService.addCustomField(securityFeature._id.toString(), {
    fieldName: 'sso_enabled',
    displayName: 'SSO activ√©',
    description: 'Single Sign-On disponible',
    dataType: FieldDataType.BOOLEAN,
    unit: FieldUnit.NONE,
    defaultValue: false,
    isRequired: true,
    sortOrder: 1,
  });

  await featureService.addCustomField(securityFeature._id.toString(), {
    fieldName: 'audit_logs',
    displayName: "Logs d'audit",
    description: 'Journalisation des activit√©s',
    dataType: FieldDataType.BOOLEAN,
    unit: FieldUnit.NONE,
    defaultValue: false,
    isRequired: true,
    sortOrder: 2,
  });

  // Fonctionnalit√©s int√©gration
  const integrationFeature = await featureService.createFeature({
    name: 'third_party_integrations',
    displayName: 'Int√©grations Tierces',
    description: 'Connexions avec des services externes',
    category: FeatureCategory.INTEGRATION,
    roles: [FeatureRole.DEVELOPER, FeatureRole.MANAGER, FeatureRole.SAAS_CUSTOMER_ADMIN],
    isGlobal: true,
    icon: 'integrations',
    sortOrder: 8,
  });

  await featureService.addCustomField(integrationFeature._id.toString(), {
    fieldName: 'max_integrations',
    displayName: 'Int√©grations maximum',
    description: "Nombre maximum d'int√©grations autoris√©es",
    dataType: FieldDataType.NUMBER,
    unit: FieldUnit.COUNT,
    defaultValue: 5,
    minValue: 0,
    isRequired: true,
    sortOrder: 1,
  });

  console.log('‚úÖ Global features initialized successfully!');

  await app.close();
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  initializeGlobalFeatures()
    .then(() => {
      console.log('‚úÖ Feature initialization completed!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Feature initialization failed:', error);
      process.exit(1);
    });
}

export { initializeGlobalFeatures };
